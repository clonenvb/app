import os
import zipfile
import subprocess
from PIL import Image
from PyQt5.QtWidgets import (
    QApplication, QWidget, QPushButton, QLabel, QVBoxLayout, QHBoxLayout,
    QMessageBox, QTextBrowser, QDialog, QToolTip
)
from PyQt5.QtCore import QTimer, Qt, QEvent
from PyQt5.QtGui import QPalette, QColor, QTextCursor, QCursor
import sys

IMG_DIR = r"E:\python\images"
OUTPUT_DIR = r"E:\python\NaXinh"
ZIP_PATH = "sticker_pack.zip"
ROWS, COLS = 3, 3

class GuidePopup(QDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng")
        self.setModal(True)
        self.setFixedSize(400, 300)
        self.setStyleSheet("background-color: #111; color: #0f0; font-family: Arial; font-size: 14px;")

        layout = QVBoxLayout()
        title = QLabel("üìò C√°ch s·ª≠ d·ª•ng c√¥ng c·ª•")
        title.setStyleSheet("font-weight: bold; font-size: 16px;")
        layout.addWidget(title)

        instructions = [
            "‚ñ∂Ô∏è Ch·∫°y c√¥ng c·ª•: T√°ch ·∫£nh v√† t·∫°o ZIP.",
            "‚ôªÔ∏è Ch·∫°y l·∫°i: X√≥a k·∫øt qu·∫£ c≈© v√† th·ª±c hi·ªán l·∫°i.",
            "üìÇ M·ªü ZIP: M·ªü file ZIP sau ƒë·∫øm ng∆∞·ª£c.",
            "üóëÔ∏è X√≥a file: X√≥a ·∫£nh v√† ZIP.",
            "üîç Click t√™n ·∫£nh: M·ªü ·∫£nh v·ª´a t·∫°o.",
            "‚ÑπÔ∏è Phi√™n b·∫£n: Ki·ªÉm tra c·∫≠p nh·∫≠t."
        ]

        for ins in instructions:
            label = QLabel(ins)
            label.setWordWrap(True)
            layout.addWidget(label)

        close_btn = QPushButton("‚úñ ƒê√≥ng")
        close_btn.setStyleSheet("background-color: #333; color: lime;")
        close_btn.clicked.connect(self.close)
        layout.addWidget(close_btn, alignment=Qt.AlignRight)

        self.setLayout(layout)

class ImageTool(QWidget):
    def __init__(self):
        super().__init__()
        self.countdown = 3
        self.image_paths = []
        self.original_img = None
        self.cell_width = 0
        self.cell_height = 0
        self.current_row = 0
        self.hovered_widget = None
        self.du_visible = True

        self.init_ui()
        self.setup_timers()

    def init_ui(self):
        self.setWindowTitle("C√¥ng c·ª• t√°ch ·∫£nh v√† n√©n ZIP (PyQt5)")
        self.setGeometry(100, 100, 540, 550)

        palette = QPalette()
        palette.setColor(QPalette.Window, QColor("black"))
        self.setPalette(palette)

        self.label = QLabel("<b style='color: lime; font-size: 16px;'>C√¥ng c·ª• t√°ch ·∫£nh 3x3 v√† t·∫°o file ZIP</b>")
        self.label.setAlignment(Qt.AlignCenter)

        self.run_btn = QPushButton("Ch·∫°y c√¥ng c·ª•")
        self.run_btn.clicked.connect(self.prepare_tool)

        self.again_btn = QPushButton("Ch·∫°y l·∫°i")
        self.again_btn.setEnabled(False)
        self.again_btn.clicked.connect(self.reset_ui)

        self.open_btn = QPushButton("M·ªü file ZIP sau 3 gi√¢y")
        self.open_btn.setEnabled(False)
        self.open_btn.clicked.connect(self.start_countdown)

        self.delete_btn = QPushButton("üóëÔ∏è X√≥a file ƒë√£ t·∫°o")
        self.delete_btn.clicked.connect(self.delete_files)

        self.help_btn = QPushButton("‚ùì H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng")
        self.help_btn.clicked.connect(self.show_full_help)

        self.status = QLabel("")
        self.status.setAlignment(Qt.AlignCenter)
        self.status.setStyleSheet("color: lime")

        self.log = QTextBrowser()
        self.log.setOpenExternalLinks(False)
        self.log.setStyleSheet("background-color: black; color: lime; font-family: Consolas;")
        self.log.anchorClicked.connect(self.open_image)

        self.author_label = QLabel("App ƒë∆∞·ª£c t·∫°o by <span style='color: lime;'>Du</span>")
        self.author_label.setStyleSheet("color: gray; font-size: 10px;")
        self.author_label.setTextFormat(Qt.RichText)

        self.version_label = QLabel("<a href='#' style='color: gray;'>Phi√™n b·∫£n: 1.0 beta</a>")
        self.version_label.setOpenExternalLinks(False)
        self.version_label.setTextFormat(Qt.RichText)
        self.version_label.linkActivated.connect(self.show_update_check)

        self.footer_layout = QHBoxLayout()
        self.footer_layout.addWidget(self.author_label, alignment=Qt.AlignLeft)
        self.footer_layout.addWidget(self.version_label, alignment=Qt.AlignRight)

        layout = QVBoxLayout()
        layout.addWidget(self.label)
        layout.addWidget(self.run_btn)
        layout.addWidget(self.again_btn)
        layout.addWidget(self.open_btn)
        layout.addWidget(self.delete_btn)
        layout.addWidget(self.help_btn)
        layout.addWidget(self.status)
        layout.addWidget(self.log)
        layout.addLayout(self.footer_layout)
        self.setLayout(layout)

        self.timer = QTimer()
        self.timer.timeout.connect(self.update_countdown)

    def setup_timers(self):
        self.du_timer = QTimer()
        self.du_timer.timeout.connect(self.toggle_du_visibility)
        self.du_timer.start(800)

    def toggle_du_visibility(self):
        color = "lime" if self.du_visible else "gray"
        self.author_label.setText(f"App ƒë∆∞·ª£c t·∫°o by <span style='color: {color};'>Du</span>")
        self.du_visible = not self.du_visible

    CURRENT_VERSION = "1.0"

    def show_update_check(self):

        reply = QMessageBox.question(self, "C·∫≠p nh·∫≠t", "B·∫°n c√≥ mu·ªën ki·ªÉm tra c·∫≠p nh·∫≠t kh√¥ng?",
                                     QMessageBox.Yes | QMessageBox.No)
        if reply == QMessageBox.Yes:
                    try:
            import urllib.request
            with urllib.request.urlopen("https://raw.githubusercontent.com/clonenvb/app/main/version.txt") as response:
                latest_version = response.read().decode().strip()
        except Exception as e:
            QMessageBox.warning(self, "L·ªói", f"Kh√¥ng th·ªÉ ki·ªÉm tra c·∫≠p nh·∫≠t: {e}")
            return

        if latest_version > CURRENT_VERSION:
            reply = QMessageBox.question(
                self, "C√≥ b·∫£n c·∫≠p nh·∫≠t m·ªõi!",
                f"Phi√™n b·∫£n m·ªõi {latest_version} ƒë√£ c√≥.\nB·∫°n c√≥ mu·ªën t·∫£i v·ªÅ kh√¥ng?",
                QMessageBox.Yes | QMessageBox.No
            )
            if reply == QMessageBox.Yes:
                
import shutil
import tempfile
download_url = "https://raw.githubusercontent.com/clonenvb/app/main/split_and_zip_with_update.py"
try:
    temp_dir = tempfile.gettempdir()
    new_file = os.path.join(temp_dir, "split_and_zip_updated.py")
    urllib.request.urlretrieve(download_url, new_file)
    QMessageBox.information(self, "ƒêang kh·ªüi ƒë·ªông l·∫°i...", "·ª®ng d·ª•ng s·∫Ω kh·ªüi ƒë·ªông l·∫°i b·∫±ng phi√™n b·∫£n m·ªõi.")
    subprocess.Popen(["python", new_file], shell=True)
    sys.exit()
except Exception as e:
    QMessageBox.warning(self, "L·ªói", f"T·∫£i ho·∫∑c ch·∫°y phi√™n b·∫£n m·ªõi th·∫•t b·∫°i: {e}")

        else:
            QMessageBox.information(self, "Th√¥ng b√°o", "B·∫°n ƒëang d√πng phi√™n b·∫£n m·ªõi nh·∫•t.")

    def show_full_help(self):
        popup = GuidePopup(self)
        popup.exec_()

    def log_message(self, message):
        self.log.append(message)
        self.log.moveCursor(QTextCursor.End)

    def log_file_link(self, path):
        name = os.path.basename(path)
        self.log.append(f"<a href='{path}' style='color:cyan;' title='Xem tr∆∞·ªõc'>{name}</a>")
        self.log.moveCursor(QTextCursor.End)

    def open_image(self, url):
        subprocess.Popen(['explorer', url.toLocalFile()], shell=True)

    def prepare_tool(self):
        self.status.setText("ƒêang x·ª≠ l√Ω...")
        self.log.clear()
        self.log_message("üîÑ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω ·∫£nh...")

        if not os.path.isdir(IMG_DIR):
            QMessageBox.critical(self, "L·ªói", "Th∆∞ m·ª•c ·∫£nh kh√¥ng t·ªìn t·∫°i.")
            return

        img_files = [f for f in os.listdir(IMG_DIR) if f.lower().endswith((".jpg", ".jpeg", ".png"))]
        if not img_files:
            QMessageBox.critical(self, "L·ªói", "Kh√¥ng t√¨m th·∫•y ·∫£nh n√†o trong th∆∞ m·ª•c.")
            return

        img_path = os.path.join(IMG_DIR, img_files[0])
        self.original_img = Image.open(img_path)
        img_width, img_height = self.original_img.size
        self.cell_width = img_width // COLS
        self.cell_height = img_height // ROWS

        os.makedirs(OUTPUT_DIR, exist_ok=True)
        self.image_paths = []
        self.current_row = 0

        self.log_message("‚ú® ƒêang c·∫Øt t·ª´ng d√≤ng ·∫£nh...")
        QTimer.singleShot(300, self.process_next_row)

    def process_next_row(self):
        if self.current_row >= ROWS:
            self.finalize_zip()
            return

        for col in range(COLS):
            left = col * self.cell_width
            upper = self.current_row * self.cell_height
            right = left + self.cell_width
            lower = upper + self.cell_height
            cropped_img = self.original_img.crop((left, upper, right, lower))
            output_path = os.path.join(OUTPUT_DIR, f"sticker_{self.current_row}_{col}.png")
            cropped_img.save(output_path)
            self.image_paths.append(output_path)
            self.log_message("‚úÖ ƒê√£ l∆∞u: ")
            self.log_file_link(output_path)

        self.current_row += 1
        QTimer.singleShot(400, self.process_next_row)

    def finalize_zip(self):
        self.log_message("üóúÔ∏è ƒêang n√©n ·∫£nh th√†nh ZIP...")
        with zipfile.ZipFile(ZIP_PATH, 'w') as zipf:
            for image_path in self.image_paths:
                zipf.write(image_path, os.path.basename(image_path))
                self.log_message(f"‚ûï {os.path.basename(image_path)}")

        self.status.setText("‚úÖ Ho√†n t·∫•t! File ZIP ƒë√£ ƒë∆∞·ª£c t·∫°o.")
        self.again_btn.setEnabled(True)
        self.open_btn.setEnabled(True)
        self.run_btn.setEnabled(False)
        self.log_message("üéâ T·∫•t c·∫£ ƒë√£ xong!")

    def delete_files(self):
        deleted = 0
        for file in self.image_paths:
            if os.path.exists(file):
                os.remove(file)
                deleted += 1
        if os.path.exists(ZIP_PATH):
            os.remove(ZIP_PATH)
            deleted += 1
        self.log_message(f"üóëÔ∏è ƒê√£ x√≥a {deleted} t·ªáp ƒë√£ t·∫°o.")
        self.status.setText("ƒê√£ x√≥a t·ªáp.")

    def reset_ui(self):
        self.status.setText("")
        self.countdown = 3
        self.run_btn.setEnabled(True)
        self.again_btn.setEnabled(False)
        self.open_btn.setEnabled(False)
        self.log.clear()

    def start_countdown(self):
        self.status.setText(f"M·ªü file trong {self.countdown} gi√¢y...")
        self.timer.start(1000)

    def update_countdown(self):
        self.countdown -= 1
        if self.countdown == 0:
            self.timer.stop()
            subprocess.Popen(['explorer', os.path.abspath(ZIP_PATH)], shell=True)
            self.status.setText("Ho√†n t·∫•t!")
        else:
            self.status.setText(f"M·ªü file trong {self.countdown} gi√¢y...")

if __name__ == '__main__':
    app = QApplication(sys.argv)
    window = ImageTool()
    window.show()
    sys.exit(app.exec_())
